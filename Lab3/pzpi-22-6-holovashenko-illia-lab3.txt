Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії




ЗВІТ

з лабораторної роботи №3
з дисципліни "Архітектура програмного забезпечення"
на тему "РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА
ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ КЛІЄНТА
ПРОГРАМНОЇ СИСТЕМИ"




Виконав:
ст. гр. ПЗПІ-22-6
Головашенко І. В.

Перевірив:
ст. викл. катедри ПІ
Сокорчук І. П.



Харків 2025
1 ІСТОРІЯ ЗМІН

Таблиця 1.1 – Історія змін
№
Дата
Версія звіту
Опис змін та виправлень
1
18.05.2025
0.1
Створено розділи “Історія змін” та “Завдання”.
2
03.06.2025
0.1
Створено розділ “Опис виконаної роботи”.
3
03.06.2025
0.1
Створено розділи “Висновки” та додатки А, Б, В.




















2 ЗАВДАННЯ

Завдання на лабораторну роботу №3 (ЛБ3):
1. Описати програмну архітектуру веб частини програмної системи.
2. Описати програмні технології та компоненти, які використовуються в веб частині програмної системи.
3. Описати доступну у веб частині системи бізнес логіку програмної системи.
4. Описати захист даних у веб частині програмної системи.
5. Описати взаємодію веб частини програмної системи з іншими компонентами програмної системи.
6. Описати підтримку інтерналізації у веб частині програмної системи.
7. Описати реалізовані у веб частині програмної системи варіанти локалізації.
8. Описати реалізовану у веб частині програмної системи функціональність для налаштування та адміністрування програмної системи.
9. Відкрити створений на попередній лабораторній роботі репозиторій GitHub.
10.  Створити у репозиторії директорію Task3 та текстовий файл з описом інженерних рішень у цій частині проєкту.
11.  Зафіксуйте кожну внесену зміну командою git commit з відповідним коментарем та фіксуйте цією командою усі наступні зміни у проєкті.
12.  Створіть у директорії Task3 піддиректорію для програмного коду.
13.  Створіть програмний код, завантажте його у створену піддиректорію, зафіксуйте внесені у репозиторій зміни.
14.  Виконайте функціональне тестування створеного програмного коду та створіть відеозапис цього тестування тривалістю 7..10 хвилин з усними поясненнями процесу тестування.
15.  Завантажте створений відеозапис тестування YouTube канал для вашого облікового запису в домені @nure.ua.
16.  Створіть для завантаженого запису його хронологічний опис.
17.  Оформіть звіт у форматі pdf та завантажте його на навчальну платформу https://dl.nure.ua/.



























3 ОПИС ВИКОНАНОЇ РОБОТИ

     Під час виконання лабораторної роботи №3 було реалізовано веб-клієнт програмної системи з використанням фреймворку Angular, який обрано завдяки його підтримці модульної архітектури, двостороннього зв’язку даних та активної спільноти. Мова програмування – TypeScript – забезпечує статичну типізацію та зручну розробку масштабованих застосунків. В якості шаблонізатора використано HTML, а стилізацію здійснено за допомогою SCSS.
     Архітектура застосунку реалізована за принципами модульності та розділення відповідальностей. Усі основні функціональні блоки винесено в окремі модулі (admin, auth, dashboard, shared, core). Було використано архітектурний шаблон Lazy Loading, який зменшує початковий обсяг завантаження сторінки. Шаблон проєктування Dependency Injection застосовується для управління сервісами, наприклад, для взаємодії з API чи зберігання токена автентифікації.
     Було створено кілька функціональних компонентів та сервісів для роботи з даними користувачів, налаштувань, тривог  та сенсорів. Реалізовано маршрутизацію, яка дозволяє здійснювати навігацію без перезавантаження сторінки. Для підвищення повторного використання коду створено окремі директори shared (для загальних компонентів) та core (для сервісів на рівні застосунку).
     Реалізовано базову авторизацію та захист доступу до маршрутових компонентів за допомогою Guard-сервісів. Додатково було побудовано UML-діаграми типу component diagram та use case diagram, які відображають взаємозв’язки між модулями та основними функціональними одиницями системи. UML діаграма прецендентів наведена на рисунку Б.1 у додатку Б. Діаграма компонентів наведена на рисунку Б.2 у додатку Б. Діаграма діяльності наведена на рисунку Б.3 у додатку Б.
     Розроблений код збережено у репозиторії GitHub у папці Task3, де також знаходяться супровідні файли опису інженерних рішень. Кожен логічний етап розробки було зафіксовано відповідною командою git commit з коментарем. Для демонстрації працездатності було проведено функціональне тестування з відеозаписом, завантаженим на YouTube у відповідний обліковий запис.



























4 ВИСНОВКИ

     У результаті виконання лабораторної роботи було створено клієнтську частину веб-застосунку з чіткою модульною архітектурою. Реалізовано основну функціональність для роботи з обліковими записами користувачів, панеллю керування, сенсорами та системними налаштуваннями.
     Отримано практичні навички роботи з Angular, організації маршрутизації, впровадження шаблонів проєктування (зокрема, ін’єкція залежностей). Також була сформована структура застосунку, яка забезпечує простоту масштабування та підтримки.
     Розроблене програмне забезпечення відповідає вимогам завдання, підтримує Lazy Loading та захист маршрутів. Було успішно виконано функціональне тестування з фіксацією результатів у відеоформаті. Звіт оформлено відповідно до вимог, а програмний код задокументовано в системі контролю версій Git.















Додаток А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/bP8pNpeCnPs.
Хронологічний опис відеозапису:
00:00 – Представлення.
00:22 – Вступ. Опис використаних технологій для реалізації проєкту.
00:45 – Опис архітектури проєкту.
04:09 – Тестування авторизації користувачів.
05:00 – Тестування сторінки профілю користувача. Перегляд та редагування профілю.
05:48 – Тестування сторінки будівель користувача. Додання нової будівлі.
06:32 – Тестування сторінки сенсорів користувача. Редагування та додання нового сенсору.
06:50 – Тестування сторінки тривог сенсора. Усунення тривоги.
07:15 – Тестування сторінки вимірів сенсора.
07:45 – Тестування сторінки обслуговувань будівель. Бізнес логіка оплати за допомогою сервісу paypal.
08:40 – Додання нового сенсору. Надсилання сенсором показників за допомогою IoT клієнта.
09:47 – Тестування панелі адміністраторів. Зміна ролі користувача та видалення.
11:40 – Тестування панелі адміністраторів. Додання обслуговування будівлі. Редагування та видалення будівлі.
13:00 – Тестування панелі адміністраторів. Додання та редагування системних налаштувань.
13:53 – Тестування панелі адміністраторів. Завантаження файлу бекапу бази даних.


Додаток Б
Графічні матеріали













Рисунок Б.1 — UML діаграма прецендентів

Рисунок Б.2 — UML діаграма компонентів











Рисунок Б.3 — UML діаграма діяльності














Додаток В
Програмний код

В.1 Конфігурація маршрутизації для модуля Dashboard в Angular-застосунку
GitHub репозиторій: https://github.com/NureHolovashenkoIllia/apz-pzpi-22-6-holovashenko-illia/blob/main/Lab3/pzpi-22-6-holovashenko-illia-lab3/src/app/dashboard/dashboard-routing-module.ts
1.  import { RouterModule, Routes } from '@angular/router';
2.  import { NgModule } from '@angular/core';
3.
4.
5.  const routes: Routes = [
6.    {
7.      path: '',
8.      redirectTo: 'overview',
9.      pathMatch: 'full'
10.   },
11.   {
12.     path: 'overview',
13.     loadComponent: () => import('./overview/overview').then(m => m.Overview)
14.   },
15.   {
16.     path: 'buildings',
17.     loadComponent: () => import('./buildings/buildings').then(m => m.Buildings)
18.   },
19.   {
20.     path: 'buildings/:id',
21.     loadComponent: () => import('./building-details/building-details').then(m => m.BuildingDetailsComponent)
22.   },
23.   {
24.     path: 'buildings/:id/sensors',
25.     loadComponent: () => import('./sensors/sensors').then(m => m.Sensors)
26.   },
27.   {
28.     path: 'buildings/:id/sensors/alarms',
29.     loadComponent: () => import('./alarms/alarms').then(m => m.Alarms)
30.   },
31.   {
32.     path: 'buildings/:id/sensors/measurements',
33.     loadComponent: () => import('./measurements/measurements').then(m => m.Measurements)
34.   },
35.   {
36.     path: 'buildings/:id/maintenances',
37.     loadComponent: () => import('./maintenances/maintenances').then(m => m.Maintenances)
38.   },
39.   {
40.     path: 'profile',
41.     loadComponent: () => import('./profile/profile').then(m => m.Profile)
42.   }
43. ];
44.
45. @NgModule({
46.   imports: [RouterModule.forChild(routes)],
47.   exports: [RouterModule]
48. })
49. export class DashboardRoutingModule {}


В.2 Сервіс автентифікації користувача AuthService
GitHub репозиторій: https://github.com/NureHolovashenkoIllia/apz-pzpi-22-6-holovashenko-illia/blob/main/Lab3/pzpi-22-6-holovashenko-illia-lab3/src/app/core/services/auth.ts
1. import { Observable, BehaviorSubject } from 'rxjs';
2. import { HttpClient } from '@angular/common/http';
3. import { Injectable } from '@angular/core';
4. import { Api } from './api';
5.
6.
7. export interface RegisterRequest {
8.   firstName: string;
9.   lastName: string;
10.   phoneNumber: string;
11.   email: string;
12.   userPassword: string;
13.   userRole: string;
14. }
15.
16. @Injectable({ providedIn: 'root' })
17. export class AuthService {
18.   private isLoggedInSubject = new BehaviorSubject<boolean>(!!localStorage.getItem('authToken'));
19.   private userRoleSubject = new BehaviorSubject<string>(localStorage.getItem('userRole') || 'GUEST');
20.
21.   isLoggedIn$ = this.isLoggedInSubject.asObservable();
22.   userRole$ = this.userRoleSubject.asObservable();
23.
24.   constructor(private http: HttpClient, private api: Api) {}
25.
26.   register(data: RegisterRequest): Observable<any> {
27.     return this.http.post(this.api.auth.register, data);
28.   }
29.
30.   login(email: string, password: string): Observable<{ token: string; role: string }> {
31.     return new Observable(observer => {
32.       this.http.post<{ token: string; role: string }>(this.api.auth.login, null, {
33.         params: { email, password }
34.       }).subscribe({
35.         next: (response) => {
36.           this.isLoggedInSubject.next(true);
37.           this.userRoleSubject.next(response.role);
38.           observer.next(response);
39.           observer.complete();
40.         },
41.         error: (err) => observer.error(err)
42.       });
43.     });
44.   }
45.
46.   logout(): void {
47.     localStorage.clear();
48.     this.isLoggedInSubject.next(false);
49.     this.userRoleSubject.next('GUEST');
50.   }
51.
52.   getToken(): string | null {
53.     return localStorage.getItem('authToken');
54.   }
55.
56.   getRole(): string {
57.     return localStorage.getItem('userRole') || 'GUEST';
58.   }
59. }