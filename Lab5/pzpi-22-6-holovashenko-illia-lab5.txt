Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії




ЗВІТ

з лабораторної роботи №5
з дисципліни "Архітектура програмного забезпечення"
на тему "РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ"




Виконав:
ст. гр. ПЗПІ-22-6
Головашенко І. В.

Перевірив:
ст. викл. катедри ПІ
Сокорчук І. П.




Харків 2025
1 ІСТОРІЯ ЗМІН

Таблиця 1.1 – Історія змін
№
Дата
Версія звіту
Опис змін та виправлень
1
18.05.2025
0.1
Створено розділи “Історія змін” та “Завдання”.
2
05.06.2025
0.1
Створено розділ “Опис виконаної роботи”.
3
05.06.2025
0.1
Створено розділи “Висновки” та додатки А, Б, В.




















2 ЗАВДАННЯ

Завдання на лабораторну роботу №5 (ЛБ5):
1. Розгорнути реалізовану програмну систему.
2. Перевірити та налаштувати роботу розгорнутої програмної системи.
3. Продемонструвати описану у розділі 3.1 Vision & Scope функціональність програмної системи.
4. Відкрити створений на попередній лабораторній роботі репозиторій GitHub.
5.  Створити у репозиторії директорію Task5 та текстовий файл з описом інженерних рішень у цій частині проєкту.
6.  Зафіксуйте кожну внесену зміну командою git commit з відповідним коментарем та фіксуйте цією командою усі наступні зміни у проєкті.
7.  Створіть у директорії Task5 піддиректорію для програмного коду.
8.  Створіть програмний код, завантажте його у створену піддиректорію, зафіксуйте внесені у репозиторій зміни.
9.  Виконайте функціональне тестування створеного програмного коду та створіть відеозапис цього тестування тривалістю 7..10 хвилин з усними поясненнями процесу тестування.
10.  Завантажте створений відеозапис тестування YouTube канал для вашого облікового запису в домені @nure.ua.
11.  Створіть для завантаженого запису його хронологічний опис.
12.  Оформіть звіт у форматі pdf та завантажте його на навчальну платформу https://dl.nure.ua/.





3 ОПИС ВИКОНАНОЇ РОБОТИ

     У ході виконання лабораторної роботи №5 було реалізовано повноцінне хмарне розгортання програмної системи FlameGuard, яка складається з серверної частини (Spring Boot API), клієнтської веб-частини (Angular), мобільного застосунку (Kotlin + Jetpack Compose), IoT клієнта (C++), а також бази даних MySQL. Всі сервіси розгорнуто в хмарному середовищі Microsoft Azure із використанням контейнеризації, що забезпечує гнучке масштабування та централізоване адміністрування.
3.1  Архітектура розгортання
Загальна схема розгортання виглядає наступним чином:
- Azure Container Registry (ACR) використовується для збереження та управління контейнеризованими зображеннями (backend та frontend).
- Azure App Service (два екземпляри) хостить фронтенд (Angular) і бекенд (Spring Boot).
- Azure Database for MySQL – Flexible Server забезпечує надійне зберігання даних із можливістю резервного копіювання.
3.2  Використані технології та інструменти
- Docker – для контейнеризації обох частин системи (Angular та Spring Boot).
- WebStorm + IntelliJ IDEA – середовища розробки для frontend та backend відповідно.
3.3 Команди Docker для білду, тегування та пушу до ACR
     Для створення контейнерів і завантаження їх до реєстру Azure було виконано наступні команди:
     Логін до ACR:
      docker login flameguard.azurecr.io
     Білд бекенду:
      docker buildx build --platform linux/amd64 -t flameguard-api:latest --output type=docker
      docker tag flameguard-api:latest flameguard.azurecr.io/flameguard-api:v1.0
      docker push flameguard.azurecr.io/flameguard-api:v1.0
     Білд фронтенду:
      docker buildx build --platform linux/amd64 -t flameguard-frontend:latest --output type=docker .
      docker tag flameguard-frontend:latest flameguard.azurecr.io/flameguard-frontend:latest
      docker push flameguard.azurecr.io/flameguard-frontend:latest
     Обидва зображення після пушу стали доступними у приватному реєстрі flameguard.azurecr.io.
     3.4 Налаштування Azure App Service
     Для кожного з контейнерів створено окремий Azure App Service Plan та App Service:
     1. Сервіс FlameGuard Backend:
     Це веб-застосунок, розгорнутий на платформі Linux, який використовує контейнер з образом flameguard.azurecr.io/flameguard-api:v1.0, що був завантажений до приватного реєстру Azure Container Registry. У конфігурації сервісу були задані змінні середовища, необхідні для підключення до бази даних:
- SPRING_DATASOURCE_URL – посилання на базу даних,
- SPRING_DATASOURCE_USERNAME — ім’я користувача для доступу до бази,
- SPRING_DATASOURCE_PASSWORD — пароль для доступу.
2. Сервіс FlameGuard Frontend:
     Цей веб-застосунок також розгорнутий на Linux-платформі, з використанням контейнера flameguard.azurecr.io/flameguard-frontend:latest. У конфігурації цього сервісу встановлено змінну середовища API_BASE_URL, яка містить адресу бекенд-сервісу, щоб забезпечити коректну взаємодію Angular-додатку з серверною частиною через HTTP-запити.
3.5 Параметри Azure Database for MySQL – Flexible Server
- Ім'я сервера: medvision.mysql.database.azure.com
- База даних: flameguard
- Користувач: illiaholovashenko
- Налаштовано брандмауер для доступу лише з IP App Services.
     Початкова ініціалізація бази даних була виконана через Spring JPA автоматично під час запуску бекенду.
     3.6 Функціональна перевірка
     Після завершення розгортання виконано повне тестування програмної системи:
     Проведено повний цикл автентифікації через Angular та мобільний застосунок. Додано тестові будівлі та сенсори. Перевірено коректність запису даних до БД, надсилання вимірів та отримання тривог.Перевірено завантаження резервних копій та CRUD-операції з App Service.Створено відеозапис тестування та завантажено його на платформу YouTube.
     Розгорнута серверна частина програмної системи за допомогою Azure App Service наведена на рисунку Б.1 у додатку Б.
     Розгорнута клієнтська частина програмної системи за допомогою Azure App Service наведена на рисунку Б.2 у додатку Б.
     Ресурсна група FlameGuard та всі сервіси, що були розгорнуті в ній наведено на рисунку Б.3 у додатку Б.











4 ВИСНОВКИ

     У результаті виконання лабораторної роботи №5:
- Розгорнуто повноцінну багатокомпонентну програмну систему FlameGuard у хмарному середовищі Microsoft Azure.
- Виконано контейнеризацію фронтенду та бекенду з подальшим збереженням у приватному реєстрі Azure Container Registry.
- Налаштовано два окремі Azure App Service для незалежного хостингу Angular та Spring Boot компонентів.
- Забезпечено надійне підключення до хмарної бази даних Azure Database for MySQL.
- Продемонстровано безперебійну взаємодію між компонентами системи після розгортання, що підтверджено функціональним тестуванням.
- Отримано практичні навички роботи з Docker, Azure CLI та налаштування сервісів хмарної інфраструктури для розгортання сучасних вебсистем.
     Розроблена система відповідає поставленим вимогам до масштабованості, безпеки та підтримує багатоплатформену взаємодію через веб- та мобільний інтерфейси.










Додаток А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/hHEXodPxgpE.
Хронологічний опис відеозапису:
00:00 – Представлення.
00:20 – Опис обраного способу розгортання.
01:31 – Опис розгортання бази даних.
02:00 – Тестування надсилання запитів до бекенду. Реєстрація користувача.
03:00 – Тестування клієнтської частини програмної системи. Авторзація користувача.
03:27 – Перегляд та редагування профілю користувача.
03:45 – Додання нової будівлі.
04:45 – Тестування IoT клієнту. Передача вимірів сенсорами.
06:25 – Тестування адміністрування системи.
08:00 – Тестування оплати обслуговування будівлі.
08:55 – Тестування надсилання сповіщень про тривоги.
09:24 – Тестування мобільного клієнта програмної системи.
12:16 – Висновки з розгортання програмної системи.










Додаток Б
Графічні матеріали


Рисунок Б.1 — Розгорнута серверна частина програмної системи за допомогою Azure App Service

Рисунок Б.2 — Розгорнута клієнтська частина програмної системи за допомогою Azure App Service




Рисунок Б.3 — Ресурсна група FlameGuard


















Додаток В
Програмний код

В.1 Dockerfile для збірки та запуску Spring Boot застосунку FlameGuard у середовищі Azure
GitHub репозиторій: https://github.com/NureHolovashenkoIllia/apz-pzpi-22-6-holovashenko-illia/blob/main/Lab5/pzpi-22-6-holovashenko-illia-lab5/Dockerfile.api
1.  FROM maven:3.9.4-eclipse-temurin-21
2.  COPY target/FlameGuard_API-0.0.1-SNAPSHOT.jar app.jar
3.  EXPOSE 8080
4.  ENTRYPOINT ["java","-jar","/app.jar"]

В.2 Dockerfile з багатоступеневою збіркою для фронтенду FlameGuard на Angular та розгортанням через Nginx
GitHub репозиторій: https://github.com/NureHolovashenkoIllia/apz-pzpi-22-6-holovashenko-illia/blob/main/Lab5/pzpi-22-6-holovashenko-illia-lab5/Dockerfile.frontend
1.  # Stage 1: Build Angular з Node.js 20.19.0
2.  FROM node:20.19.0 AS builder
3.  WORKDIR /app
4.  COPY . .
5.  RUN npm install
6.  RUN npm run build -- --configuration production
7.
8.  # Stage 2: Nginx for serving
9. FROM nginx:alpine
10. COPY --from=builder /app/dist/FlameGuard-Frontend /usr/share/nginx/html
11. COPY nginx.conf /etc/nginx/conf.d/default.conf
12. EXPOSE 80
13. CMD ["nginx", "-g", "daemon off;"]