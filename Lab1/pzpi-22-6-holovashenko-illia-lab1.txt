Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії




ЗВІТ

з лабораторної роботи №1
з дисципліни "Архітектура програмного забезпечення"
на тему "Розробка Vision & Scope"





Виконав:
ст. гр. ПЗПІ-22-6
Головашенко І. В.

Перевірив:
ст. викл. катедри ПІ
Сокорчук І. П.




Харків 2025
1 ІСТОРІЯ ЗМІН

Таблиця 1.1 – Історія змін
№
Дата
Версія звіту
Опис змін та виправлень
1
25.04.2025
0.1
Створено розділи “Історія змін” та “Завдання”
2
27.04.2025
0.1
Створено розділ “Опис виконаної роботи”
3
28.04.2025
0.1
Оновлено пункти 3.1 та 3.2 "Vision & Scope" документу
4
29.04.2025
0.1
Описано пункт 3.3 "Vision & Scope" документу
5
29.04.2025
0.1
Створено розділи “Висновки” та “Список використаних джерел”
















2 ЗАВДАННЯ

Завдання на лабораторну роботу №1 (ЛБ1):
- Доопрацювати документ Vision & Scope для програмної системи попередження про пожежі, зосередившись на оновленні розділу 3 Scope and Limitations.
- Описати 3.1 Scope of Initial Release, включивши всі компоненти системи: серверну частину, мобільний застосунок, веб-клієнт та IoT-пристрої.
- Сформулювати бачення 3.2 Scope of Subsequent Releases, передбачивши інтеграцію штучного інтелекту до системи. Вказати способи застосування ШІ, методи збирання даних та варіанти навчання/використання моделей.
- Описати 3.3 Limitations and Exclusions, вказавши обмеження функціональності системи, а також навмисно виключений функціонал з поясненням причин.














3 ОПИС ВИКОНАНОЇ РОБОТИ

     У процесі виконання лабораторної роботи було доопрацьовано документ Vision & Scope шляхом розширення розділу 3 Scope and Limitations, що включає:
- Формування опису повного скоупу початкового релізу системи з урахуванням серверної частини, мобільного додатка, веб-клієнта та IoT-компонентів.
- Розробку бачення наступних релізів із потенційною інтеграцією штучного інтелекту, включаючи аспекти застосування, збору даних та навчання моделей.
- Аналіз функціональних обмежень системи та опис навмисно виключених можливостей.
   Оновлений документ Vision & Scope наведено у Додатку Б.














4 ВИСНОВКИ

     У результаті виконання лабораторної роботи було доопрацьовано документ Vision & Scope для програмної системи попередження про пожежі. Основна увага була зосереджена на оновленні розділу 3 Scope and Limitations, який визначає межі, можливості та перспективи розвитку системи.
     Було докладно описано 3.1 Scope of Initial Release, що охоплює всі основні компоненти системи: серверну частину, мобільний застосунок, веб-клієнт і IoT-пристрої. Це дозволило сформувати цілісне бачення роботи всієї архітектури програмного комплексу.
     У розділі 3.2 Scope of Subsequent Releases визначено можливості інтеграції штучного інтелекту, зокрема потенційні сценарії застосування, способи збору даних для навчання моделей та варіанти використання вже існуючих або кастомних AI-рішень.
     Також було сформульовано 3.3 Limitations and Exclusions, де наведено перелік функціональних обмежень системи, а також описано функціонал, який свідомо виключено з поточних та майбутніх релізів з технічних або стратегічних причин.









5 СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ

1. Alarm | Системи безпеки. Проектування Монтаж Обслуговування. Проектування встановлення та обслуговування систем безпеки. URL: https://www.alarm.in.ua/ (дата звернення: 25.04.2025).
2. Smart Care. Протипожежна безпека. URL: https://thecaresmart.com/service/fire-protection-system (дата звернення: 25.04.2025).
3. Техноспектр-Сервіс. Протипожежний захист. URL: https://ts.kiev.ua/ (дата звернення: 25.04.2025).




















Додаток А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/8uZhJruLG2g.
Хронологічний опис відеозапису:
00:05 – Представлення.
00:30 – Назва проєкту
00:40 – Підрозділ 1.1 Background (Передумови)
2:09 – Підрозділ 1.2 Business Opportunity (Бізнес-можливості)
5:00 – Підрозділ 2.1 Vision Statement (Окреслення концепції)
6:14 – Підрозділ 2.2 Major Features (Головна функціональність)
8:15 – Підрозділ 3.1 Scope of Initial Release (Рамки первинного випуску)
13:12 – Підрозділ 3.2 Scope of Subsequent Releases (Рамки наступних випусків)
16:40 – Підрозділ 3.3 Limitations and Exclusions (Обмеження та виключення)
19:20 – Підрозділ 4.3 Operating Environment (Робоче середовище)














Додаток Б
Документ Vision & Scope

Vision and Scope Document
for
FlameGuard
Версія 1.1
Підготовлений ст. гр. ПЗПІ-22-6 Головашенко Іллею
Харківський національний університет радіоелектроніки
29.04.2025






Table of Contents

Table of Contents											9
Revision History											9
1.	Business Requirements									10
1.1.	Background											10
1.2.	Business Opportunity									11
2.	Vision of the Solution									13
2.1.	Vision Statement										13
2.2.	Major Features										13
3.	Scope and Limitations									16
3.1.	Scope of Initial Release									16
3.2.	Scope of Subsequent Releases								19
3.3     Limitations and Exclusions                                                                              21
4.	Business Context										24
4.1.	Operating Environment									24

Revision History
Name
Date
Reason For Changes
Version
Illia Holovashenko
10.12.2024

1.0
Illia Holovashenko
28.04.2025
Оновлено пункти 3.1 та 3.2
1.1
Illia Holovashenko
29.04.2025
Описано пункт 3.3
1.1






1. Business Requirements
1.1. Background
   У сучасному світі питання безпеки житлових та комерційних приміщень набуває все більшої актуальності. Однією з найсерйозніших загроз для таких об’єктів є пожежі, які можуть спричиняти значні матеріальні втрати та загрожувати життю людей. Швидке виявлення та своєчасне попередження про можливу пожежну небезпеку є критично важливими для мінімізації ризиків та забезпечення безпеки.
   Розробка програмної системи для попередження про пожежі спрямована на підвищення ефективності моніторингу та реагування на потенційні загрози. Вона використовує можливості Інтернету речей (IoT) для збору даних від датчиків диму, температури, газу та вологості, а також сучасні інформаційні технології для аналізу та обробки цих даних у реальному часі. Головна мета проєкту – це створення інтелектуальної системи, яка дозволяє своєчасно виявляти можливі ризики виникнення пожежі, сповіщати користувачів про загрози та забезпечувати доступ до архівних даних для аналізу і підвищення рівня безпеки.
   Реалізація проєкту дозволить:
- Знизити ризик виникнення пожеж шляхом оперативного попередження про небезпечні умови;
- Забезпечити зручний контроль за станом системи через мобільний додаток та веб-інтерфейс;
- Покращити впровадження заходів безпеки завдяки аналізу даних і звітів зібраних з датчиків.
   Таким чином, запропонована система сприяє не лише збереженню майна та життя людей, а й підвищенню загального рівня безпеки у сучасному суспільстві.
1.2. Business Opportunity
   Ринок систем попередження про пожежі активно розвивається через підвищену увагу до безпеки приміщень, інноваційні технології та бажання людей забезпечити комфортне та безпечне проживання в оселі.
   Серед основних аналогів можна виділити наступні рішення:
1) Alarm – надає потужну систему протипожежної безпеки, що включає систему димовидалення, автоматичну систему пожежогасіння та ін. Не надає можливості віддалено переглядати стан системи через мобільні додатки чи веб-інтерфейс.
2) Smart Care – реалізує функції “Розумного дому” для надійного захисту від пожежі. Дозволяє налаштовувати власні сценарії для негайного реагування системи при можливій пожежі. Висока вартість послуг для нових користувачів. Відсутня можливість отримання детальної інформації про стан системи.
3) Техноспектр-Сервіс – має широкий вибір протипожежних послуг та не високі ціни але має застарілий веб-інтерфейс, та працює лише у місті Київ.
   Програмна система FlameGuard має кілька ключових переваг:
- Миттєві сповіщення: у випадку виявлення потенційної небезпеки користувачі отримують повідомлення в реальному часі через мобільний додаток, що мінімізує час реагування;
- Зручний веб-інтерфейс: інтерактивна панель управління дозволяє легко аналізувати дані та відстежувати історію подій;
- Аналітика та прогнозування: система здатна виявляти тренди та потенційні ризики завдяки аналізу даних, що підвищує рівень попереджувальної безпеки.
- Доступна ціна та масштабованість: система орієнтована на різні категорії користувачів (приватних будинків лікарні, адміністративні будівлі), що робить її привабливою для широкого ринку.
     Модель монетизації
     Проєкт орієнтується на гнучку модель монетизації, що включає:
- Продаж обладнання: датчиків та базових модулів для встановлення системи;
- Підписка на послуги: доступ до аналітики, архівних даних та розширених функцій;
- Реклама: інтеграція з партнерами, що пропонують послуги технічного обслуговування або страхування.
     Цільовий ринок
     Система орієнтована на декілька ключових сегментів:
- Приватні домогосподарства: забезпечення безпеки житлових приміщень;
- Малий та середній бізнес: контроль за станом безпеки офісів, складів та магазинів;
- Державні установи: школи, лікарні, адміністративні будівлі.
     Проєкт може приносити прибуток завдяки багатоканальній монетизації, знижуючи бар'єри входу для користувачів та забезпечуючи високу конкурентоспроможність. Унікальне поєднання функціональності, доступності та інноваційних технологій створює значний потенціал для масштабування й розширення ринків збуту в майбутньому.
2. Vision of the Solution
2.1. Vision Statement
   Метою розробки програмної системи попередження про пожежі є створення надійного, інтегрованого рішення для раннього виявлення потенційних пожежних загроз, що забезпечує захист життів і майна. Система використовує сучасні технології, датчики для моніторингу навколишнього середовища, обробляє отримані дані на серверній стороні та надає доступ до інформації через інтуїтивні мобільні та веб-інтерфейси.
   Цей продукт дозволить користувачам:
- Отримувати миттєві сповіщення про загрози, такі як підвищення температури, дим чи витік газу;
- Здійснювати моніторинг стану датчиків у режимі реального часу;
- Отримувати аналітичні звіти для оцінки безпеки та ефективності роботи системи.
   У майбутньому використання цієї системи сприятиме значному зниженню ризику пожеж, підвищенню рівня безпеки в приміщеннях різного типу (житлових, лікарняних) та мінімізації людських і матеріальних втрат. Продукт відповідає сучасним потребам безпеки, інтегрується з існуючими рішеннями, є зручним для користувачів і забезпечує високу надійність навіть у складних умовах.

2.2. Major Features
   MF-1. Раннє виявлення пожежної загрози.
- Система використовує IoT-датчики для моніторингу температури, диму, вологості та газів, щоб виявляти потенційні загрози на ранніх етапах.
   MF-2. Миттєві сповіщення про загрози пожежі.
- Користувачі отримують push-сповіщення на мобільні пристрої у разі виявлення потенційної пожежі, що дає змогу негайно реагувати.
   MF-3. Моніторинг стану системи у режимі реального часу.
- Користувачі можуть зручно переглядати всі дані з датчиків, які зображені на інтерактивній панелі, та отримувати доступ до архіву записів через мобільний застосунок або веб-інтерфейс.
   MF-4. Адміністрування програмної системи.
- Адміністратори системи контролюють всі аспекти роботи системи, управлінням датчиками, користувачами, сповіщеннями та аналітикою за допомогою веб-інтерфейсу для адміністрування.
   MF-5. Ведення статистики роботи системи.
- Автоматизоване створення звітів про роботу системи, включно з історією спрацювань датчиків, кількістю тривог і загальним станом безпеки.
   MF-6. Виклик служби порятунку.
- Виклик найближчої пожежної служби при натисненні на кнопку “SOS” користувачем або коли датчики зафіксували потенційну загрозу пожежі. Додатково надсилає точні дані датчиків і геолокацію.
   MF-7. Виявлення технічних несправностей датчиків.
- Система інформує користувачів про несправності чи збої в роботі датчиків для забезпечення безперервної роботи.
   MF-8. Безпека даних.
- Дані, які надходять від датчиків, а також особисті дані користувача шифруються та захищені від несанкціонованого доступу для забезпечення конфіденційності.
   MF-9: Реалізація API для обробки запитів.
- API забезпечує інтеграцію між компонентами системи, такими як IoT-датчики, мобільний додаток та веб-інтерфейс. Воно дозволяє обробляти дані з датчиків, зберігати їх та надавати доступ до інформації в реальному часі.











3. Scope and Limitations
3.1. Scope of Initial Release
   Перший випуск програмної системи FlameGuard охоплює створення повнофункціональної інфраструктури для моніторингу пожежної безпеки, що дозволяє в реальному часі виявляти потенційні загрози, оперативно сповіщати користувачів та надавати інструменти для аналізу зібраних даних. Усі компоненти системи – серверна частина, IoT-пристрої, мобільний клієнт та веб-інтерфейс – будуть інтегровані між собою та забезпечуватимуть безперервну, надійну й захищену взаємодію.
3.1.1. Серверна частина
- Обробка даних від датчиків: Прийом даних та їх збереження у базу даних для подальшого аналізу та формування звітів;
- Авторизація користувачів;
- Генерація миттєвих сповіщень про загрози пожежі;
- Підтримка багатомовності (українська та англійська мови), включаючи різні формати дат та часу;
- Управління пристроями (Адміністрування): Додавання нових датчиків до системи та налаштування їх параметрів. Видалення або відключення несправних пристроїв.
- Управління користувачами (Адміністрування): Створення та налаштування облікових записів користувачів, включаючи адміністраторів, та інших ролей. Блокування або видалення облікових записів, які більше не потрібні або викликають підозру. Скидання паролів та управління процесом відновлення доступу.
- Захист персональних даних відбуватиметься за допомогою шифрування переданих даних, використання токенів для аутентифікації та обмеження доступу на основі ролей;
- Дані зберігатимуться у реляційній базі даних, з регулярним створенням резервних копій, та видаленням застарілих записів відповідно до політики.

3.1.2. IoT-клієнт
- Моніторинг датчиків: Отримання даних про температуру, дим, вологість та гази з IoT-датчиків.
- Передача даних на сервер: Підтримка регулярної передачі даних, а також можливість екстреної відправки у разі перевищення критичних значень датчиків.
- Технічний контроль: Виявлення несправностей датчиків, таких як збої передачі даних або вихід із ладу. Сповіщення сервера про технічні несправності для оперативного реагування.

3.1.3. Mobile (Мобільний додаток)
- Перегляд поточного стану підключених датчиків. Перегляд історії спрацювань і даних з датчиків.
- Налаштування типів сповіщень (критичні тривоги, технічні збої).
- Зміна мовного інтерфейсу (підтримка локалізації).
- Додавання та налаштування датчиків через мобільний додаток.
- Оперативне відключення несправних датчиків із можливістю перегляду причин.

3.1.4. Frontend (Веб-інтерфейс)
- Відображення стану всіх підключених датчиків у реальному часі.
- Фільтрування та сортування даних. Можливість перегляду даних датчиків за певний період, критеріями (тип датчика, місцезнаходження).
- Архів даних про тривоги із зазначенням дати, часу та типу спрацювання.
- Відображення статистики тривог у графічному форматі (графіки, діаграми).
- Генерація звітів про показники системи, кількість тривог, технічний стан датчиків. Експорт звітів у формати PDF, Excel для аналізу та документування.
- Функції адміністрування:
1. Керування користувачами. Створення, редагування, блокування, видалення облікових записів. Призначення ролей (системний адміністратор, адміністратор бази даних, користувач).
2. Керування IoT-пристроями. Додавання нових сенсорів до системи. Редагування властивостей пристроїв (розташування, порогові значення, тип). Відключення або видалення несправних пристроїв. Перегляд журналу технічних подій (збої, несправності, відключення).
3. Налаштування безпеки. Керування політиками паролів та автентифікації. Перевірка спроб входу, підозрілих дій, попередження про потенційні загрози.

3.1.5. Реалізація бізнес-логіки у першому випуску програмного продукту

- Збір і обробка даних IoT-датчиків: Дані з датчиків передаються на сервер, перевіряються на коректність і порівнюються з критичними значеннями для виявлення загроз.
- Генерація тривог і сповіщень: У разі перевищення критичних значень генеруються тривоги, які реєструються в базі даних і передаються користувачам через сповіщення.
- Моніторинг показів датчиків: Користувачі можуть переглядати стан датчиків через запит до сервера.
- Виявлення технічних несправностей: Система відстежує регулярність передачі даних від датчиків та сповіщає про несправності.
- Звітність та аналіз: Дані про події та тривоги зберігаються у базі даних і можуть експортуватися для подальшого аналізу.

3.2. Scope of Subsequent Releases
     У майбутніх релізах передбачена інтеграція ШІ у FlameGuard, що дозволить підвищити ефективність системи, зробивши її проактивною та самоадаптивною:
3.2.1 Застосування
- Прогнозування пожеж: AI-модель буде аналізувати історичні патерни показників температури, вологості, диму та газів, щоб виявити потенційні загрози до настання критичних умов.
- Класифікація тривог: ШІ зможе відфільтровувати хибні спрацювання (наприклад, короткочасне зростання температури від кухонного приготування) та визначати, які спрацювання вимагають негайної реакції.
- Прогнозування технічних збоїв: аналіз частоти, сили сигналу та часу передачі даних дозволить виявляти сенсори з ризиком виходу з ладу.
- Адаптація до середовища: ШІ враховуватиме час доби, погодні умови, розташування будівлі для динамічного коригування порогових значень датчиків.
     3.2.2 Збирання даних
     Для ефективного навчання моделей ШІ система FlameGuard збиратиме та зберігатиме структуровані та позначені дані:

1. Дані з IoT-датчиків:
- Тип пристрою (температура, газ, дим, вологість)
- Час, місце, рівень сигналу
- Значення показників кожні N секунд
2. Системні події:
- Спрацювання тривог, підтвердження/відхилення користувачем
- Записи про хибні спрацювання
- Сигнали про технічні несправності
3. Погодні умови (через API):
- Температура, вологість, атмосферний тиск, напрям вітру
4. Поверхова карта будівлі:
- Контекстуальна інформація про план приміщення та розміщення датчиків
     Дані зберігатимуться централізовано у базі даних для підготовки до навчання моделей.
     3.2.3 Навчання/використання
     Для реалізації AI-функціоналу передбачається етапність впровадження:
1. Початковий етап: використання готових AI API
- AWS Forecast, Azure Anomaly Detector, Google Vertex AI – для аналізу трендів та виявлення аномалій без потреби у власній моделі.
- Висока швидкість запуску, але менша кастомізація.
2. Середньострокова перспектива: донавчання попередньо навчених моделей
- На основі придатних open-source моделей.
- Використання TensorFlow для кастомізації.
- Тренування на власних даних про пожежі та хибні спрацювання.
3. Довгострокова стратегія: повна розробка власної ML-моделі
- Створення індивідуальної AI-системи з урахуванням специфіки FlameGuard.
- Деплой як мікросервіс (REST API) для гнучкого масштабування та оновлення моделей.
     Навчання здійснюватиметься офлайн з періодичним оновленням моделі. Результати моделі кешуватимуться для пришвидшення відповіді в режимі реального часу.

3.3. Limitations and Exclusions
     У поточному та майбутніх релізах системи FlameGuard існує низка обмежень, зумовлених технічними, економічними, юридичними або стратегічними причинами. Частина функціоналу була навмисно виключена, щоб сфокусуватись на критично важливих функціях та забезпечити якісну реалізацію базових можливостей системи.
     3.3.1. Обмеження функціональності
- Залежність від інтернет-з’єднання. Система потребує стабільного інтернет-з’єднання для передачі даних від IoT-пристроїв, обробки запитів на сервері та надсилання push-сповіщень. У разі перебоїв у зв’язку можливі затримки або втрата даних.
- Фізична прив’язка до сенсорів. Без наявності встановлених IoT-датчиків система не може виявити потенційні пожежі. Віртуальна оцінка ризиків або симуляційне передбачення без фізичних даних не реалізовані.
- AI-функціонал недоступний в першому релізі. На початковому етапі впроваджується лише збирання даних для навчання майбутніх моделей штучного інтелекту. Розумне прогнозування та адаптивне реагування будуть доступні у наступних релізах.
- Обмежена автономність IoT-пристроїв. В автономному режимі (без живлення чи зв’язку) пристрої зберігають дані локально лише обмежений час. Відновлення після збою потребує синхронізації з сервером.
- Не всі платформи мобільних пристроїв підтримуються. У першій версії підтримуються лише Android-пристрої. Підтримка iOS відкладена на пізніший етап.

     3.3.2. Навмисно виключений функціонал
- Відеоспостереження та розпізнавання вогню на відео. Обробка відеопотоків потребує значних обчислювальних ресурсів, спеціалізованого обладнання та інтеграції з камерами. Через складність реалізації та потребу в сертифікації відеоаналітика виключена з початкових релізів.
- Автоматичне пожежогасіння. FlameGuard не керує фізичними пристроями гасіння, оскільки це потребує складної апаратної інтеграції та проходження сертифікації згідно з державними стандартами безпеки.
- Розпізнавання облич користувачів. Враховуючи вимоги до захисту персональних даних та ризики, пов’язані з приватністю, система не підтримує біометричну ідентифікацію користувачів.
- Аналіз повітря на токсичні речовини (CO, CO₂). Система наразі не включає підтримку спеціалізованих хімічних сенсорів, які вимагають калібрування та складної сертифікації.
- Офлайн-режим роботи з повним функціоналом. Через архітектуру, побудовану на принципах хмарних сервісів, офлайн-режим підтримується лише частково (наприклад, кешування останніх даних), але не дозволяє повноцінну роботу всієї системи.
     Ці обмеження та виключення є результатом усвідомленого проектного компромісу, спрямованого на оптимізацію термінів розробки, стабільність системи та відповідність найважливішим вимогам користувачів.















4. Business Context
4.3. Operating Environment
   У проєкті використовуватимуться сучасні технології та програмні засоби для забезпечення стабільної та ефективної роботи системи попередження про пожежі. IoT-клієнт буде реалізовано на мові програмування C++. Мобільний додаток буде реалізовано на мові Kotlin із використанням Jetpack Compose. Для серверної частини застосовуватиметься Java, Spring Boot, Hibernate ORM і MySQL як СУБД, забезпечуючи масштабованість і надійну інтеграцію з IoT через REST API. Веб-інтерфейс буде реалізовано за допомогою Angular, TypeScript, SCSS і HTML із використанням Angular Material для інтуїтивного користувацького інтерфейсу.
   Основними вимогами до системи є доступність, надійність, продуктивність та цілісність. Система повинна забезпечувати безперебійний доступ до даних через мобільний додаток і веб-інтерфейс навіть у нестабільних мережах. Надійність буде досягнуто за допомогою резервного копіювання даних і сповіщення про несправності пристроїв. Система має забезпечувати швидку обробку даних від великої кількості датчиків у реальному часі та швидке завантаження інтерфейсів. Цілісність даних забезпечуватиметься транзакційним контролем у СУБД та точністю інформації, отриманої з IoT-пристроїв.